{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "57024835-e5f6-4779-bc60-9d9a283afffa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Declare Dependencies \n",
    "from bs4 import BeautifulSoup as bs\n",
    "from splinter import Browser\n",
    "import pandas as pd\n",
    "import os\n",
    "import time\n",
    "import requests\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "f2faaa89-89e1-4dee-a71b-338543e5fedc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def scrape(): \n",
    "    executable_path = {'executable_path': ChromeDriverManager().install()}\n",
    "    browser = Browser('chrome', **executable_path, headless=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "3d14b0a8-f9fd-4071-b072-d1b67a5b1320",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Mars News\n",
    "def scrape_mars_news():\n",
    "\n",
    "        # Initialize browser \n",
    "        browser = init_browser()\n",
    "\n",
    "        # Visit Nasa news url through splinter module\n",
    "        url = 'https://redplanetscience.com/'\n",
    "        browser.visit(url)\n",
    "\n",
    "        # HTML Object\n",
    "        html = browser.html\n",
    "\n",
    "        # Parse HTML with Beautiful Soup\n",
    "        soup = bs(html, 'html.parser')\n",
    "\n",
    "        # Retrieve the latest element that contains news title and news_paragraph\n",
    "        news_title = soup.find('div', class_='content_title').find('a').text\n",
    "        news_p = soup.find('div', class_='article_teaser_body').text\n",
    "\n",
    "        # Dictionary entry from MARS NEWS\n",
    "        mars_info['news_title'] = news_title\n",
    "        mars_info['news_paragraph'] = news_p\n",
    "\n",
    "        return mars_info\n",
    "\n",
    "        browser.quit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "3339a6ac-347a-47bb-8348-f96c5d377949",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Featured Imiges\n",
    "def scrape_mars_image():\n",
    "\n",
    "        # Initialize browser \n",
    "        browser = init_browser()\n",
    "\n",
    "        #browser.is_element_present_by_css(\"img.jpg\", wait_time=1)\n",
    "\n",
    "        # Visit Mars Space Images through splinter module\n",
    "        featured_image_url = 'https://spaceimages-mars.com/'\n",
    "        browser.visit(featured_image_url)\n",
    "\n",
    "        # HTML Object \n",
    "        html_image = browser.html\n",
    "\n",
    "        # Parse HTML with Beautiful Soup\n",
    "        soup = bs(html_image, 'html.parser')\n",
    "\n",
    "        # Retrieve background-image url from style tag \n",
    "        image_url  = soup.find('article')['style'].replace('background-image: url(','').replace(');', '')[1:-1]\n",
    "\n",
    "        # Website Url \n",
    "        main_url = 'https://spaceimages-mars.com/'\n",
    "\n",
    "        # Concatenate website url with scrapped route\n",
    "        image_url = main_url + image_url\n",
    "\n",
    "        # Display full link to featured image\n",
    "        image_url \n",
    "\n",
    "        # Dictionary entry from FEATURED IMAGE\n",
    "        mars_info['image_url'] = image_url \n",
    "        \n",
    "        browser.quit()\n",
    "\n",
    "        return mars_info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "3bb270b1-0841-4bc5-a2c4-ebbabf342e59",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Mars Facts\n",
    "def scrape_mars_facts():\n",
    "\n",
    "        # Initialize browser \n",
    "        browser = init_browser()\n",
    "\n",
    "         # Visit Mars facts url \n",
    "        url = 'https://galaxyfacts-mars.com/'\n",
    "        browser.visit(url)\n",
    "\n",
    "        # Use Pandas to \"read_html\" to parse the URL\n",
    "        tables = pd.read_html(url)\n",
    "        #Find Mars Facts DataFrame in the lists of DataFrames\n",
    "        df = tables[1]\n",
    "        #Assign the columns\n",
    "        df.columns = ['Description', 'Value']\n",
    "        html_table = df.to_html(table_id=\"html_tbl_css\",justify='left',index=False)\n",
    "\n",
    "        # Dictionary entry from Mars Facts\n",
    "\n",
    "        mars_info['tables'] = html_table\n",
    "\n",
    "        return mars_info\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "9e1b5dc7-0beb-413d-aa1b-3309570d7b8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Mars Hemisphere\n",
    "\n",
    "def scrape_mars_hemispheres():\n",
    "    browser = Browser('chrome', **executable_path, headless=False)\n",
    "    url = 'https://marshemispheres.com/cerberus.html'\n",
    "    browser.visit(url)\n",
    "    html = browser.html\n",
    "    soup = bs(html, 'html.parser')\n",
    "    href = soup.find_all('a')[4]['href']\n",
    "    cerebrus = 'https://marshemispheres.com/' + href\n",
    "    cerebrustitle = soup.find('h2', class_='title').text\n",
    "    # ## Schiaparelli\n",
    "    browser = Browser('chrome', **executable_path, headless=False)\n",
    "    url = 'https://marshemispheres.com/schiaparelli.html'\n",
    "    browser.visit(url)\n",
    "    html = browser.html\n",
    "    soup = bs(html, 'html.parser')\n",
    "    href = soup.find_all('a')[4]['href']\n",
    "    schiaparelli = 'https://marshemispheres.com/' + href\n",
    "    schiaparellititle = soup.find('h2', class_='title').text\n",
    "    # ## Syrtis Major\n",
    "    browser = Browser('chrome', **executable_path, headless=False)\n",
    "    url = 'https://marshemispheres.com/syrtis.html'\n",
    "    browser.visit(url)\n",
    "    html = browser.html\n",
    "    soup = bs(html, 'html.parser')\n",
    "    href = soup.find_all('a')[4]['href']\n",
    "    syrtis = 'https://marshemispheres.com/' + href\n",
    "    syrtistitle = soup.find('h2', class_='title').text\n",
    "    # ## Valles Marineris\n",
    "    browser = Browser('chrome', **executable_path, headless=False)\n",
    "    url = 'https://marshemispheres.com/valles.html'\n",
    "    browser.visit(url)\n",
    "    html = browser.html\n",
    "    soup = bs(html, 'html.parser')\n",
    "    href = soup.find_all('a')[4]['href']\n",
    "    valles = 'https://marshemispheres.com/' + href\n",
    "    vallestitle = soup.find('h2', class_='title').text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "975264a4-131d-4321-b9a0-97470f75ad27",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save as a dictionary\n",
    "    marsdata = [\n",
    "        {'NewsTitle': news_title, \n",
    "        \"NewsText\": news_p, \n",
    "        \"FeaturedImage\": featured_image_url,\n",
    "        \"MarsFacts\": df,\n",
    "        \"Valles_title\": \"Valles Marineris Hemisphere\", \n",
    "        \"Valles_img_url\": valles,\n",
    "        \"Cerberus_title\": \"Cerberus Hemisphere\", \n",
    "        \"Cerberus_img_url\": cerebrus,\n",
    "        \"Schiaparelli_title\": \"Schiaparelli Hemisphere\", \n",
    "        \"Schiaparelli_img_url\": schiaparelli,\n",
    "        \"Syrtis_title\": \"Syrtis Major Hemisphere\", \n",
    "        \"Syrtis_img_url\": syrtis},\n",
    "    ]\n",
    "    print(marsdata)\n",
    "    browser.quit()\n",
    "    return(marsdata)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
